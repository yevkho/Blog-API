// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// .env
// NODE_ENV="development" -- set to 'production' for express optimization at launch - https://expressjs.com/en/advanced/best-practice-performance.html#use-try-catch 
// DATABASE_URL="postgresql://XXX:YYY.@localhost:5432/top_blogapi" 
// # node: require('crypto').randomBytes(64).toString('hex')
// ACCESS_TOKEN_SECRET="3e920a0d4f10a278b8a3ec8b48b7dbd09ad6199d76b07662adea9389962a00e587551a1321991e9e7cb8c4f2e4da4e60ade02128fdb020f4d5b73ed9d2a1aa85"
// # TOKEN_EXPIRE_TIME=<time>

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  status    Status   @default(ACTIVE)  // help to deactivate users without removing their data
  
  posts     Post[]
  comments  Comment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())  
  title     String   @db.VarChar(255)
  content   String
  published Boolean  @default(false)
  updatedAt DateTime @updatedAt

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  comments  Comment[]  
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String

  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])

  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}